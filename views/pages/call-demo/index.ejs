<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <title>Get started with Voice Calling</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous" />

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.min.js" integrity="sha384-cuYeSxntonz0PPNlHhBs68uyIAVpIIOZZ5JqeqvYYIcEL727kskC66kF92t6Xl2V" crossorigin="anonymous"></script>

  <script type="text/javascript" src="/dependencies/sails.io.js"></script>
  <script src="https://download.agora.io/sdk/release/AgoraRTC_N-4.18.0.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@speechly/browser-client@2.6.5/core/speechly.umd.min.js" integrity="sha256-T6GnZqWX4692g/IrOZ3bwgKwQ5UzPNss05rjsX2kcvU=" crossorigin="anonymous"></script>
</head>

<body>
  <div class="container">
    <div class="row my-5">
      <div class="col-12">
        <h2 class="text-center">Get started with Voice Calling</h2>
        <div class="text-center mb-10">
          <button type="button" class="btn btn-success" id="join">
            Join
          </button>
          <button type="button" class="btn btn-danger" id="leave">
            Leave
          </button>
          <audio controls id="audioPlayer"></audio>
        </div>
      </div>
    </div>
    <div class="row">
      <div class="col-6">
        <div class="row">
          <h2 class="">English Voice Calling Transcription</h2>
          <button type="button" class="btn btn-info changeLang col-4" data-lang="en" id="changeLangEN">
            Enable-En
          </button>
          <div id="transcripts-en"></div>
          <p id="tentative-en"></p>
        </div>
        <br />
        <div id="message-en"></div>
      </div>
      <div class="col-6">
        <h2 class="">French Voice Calling Transcription</h2>
        <div class="row">
          <button type="button" class="btn btn-info changeLang col-4" data-lang="fr" id="changeLangFR">
            Enable-FR
          </button>
          <div id="transcripts-fr"></div>
          <p id="tentative-fr"></p>
        </div>
        <br />
        <div id="message-fr"></div>
      </div>
    </div>
  </div>
</body>

<script type="module">
  // startRecording();

  let user = "<%= userId %>";
  const selectElement = document.getElementById("mySelect");

  let mediaRecorder; // Declare mediaRecorder variable globally
  const DEEPGRAM_API_KEY = "94508779e802ad285aee9c7468235ee39bab7989";
  const audioPlayer = document.getElementById("audioPlayer");
  
  function startRecording(lang) {
    let chunks = [];
    navigator.mediaDevices
      .getUserMedia({
        audio: true,
      })
      .then((stream) => {
        if (!MediaRecorder.isTypeSupported("audio/webm"))
          return alert("Browser not supported");
        mediaRecorder = new MediaRecorder(stream, {
          mimeType: "audio/webm",
        });

        const detectLanguageInterval = setInterval(async () => {
          console.log("new chunk", chunks?.length);
          if (chunks?.length) {
            const audioBlob = new Blob(chunks, {
              type: "audio/webm"
            });

            let audioData = new File([audioBlob], `recording-${new Date()}.ogg`);
            const audioUrl = URL.createObjectURL(audioBlob);
            console.log({
              audioUrl
            });
            audioPlayer.src = audioUrl;

            console.log("new audio duration",audioPlayer.duration);
            if (audioPlayer.duration) {
            }
            let res = await fetch(`https://api.deepgram.com/v1/listen?detect_language=true&punctuate=true`, {
              method: 'POST',
              headers: {
                'Authorization': `Token ${DEEPGRAM_API_KEY}`,
                'Content-Type': 'audio/mp3',
              },
              body: audioData,
            });

            if (res?.ok) {
              let resJSON = await res.json();
              console.log({
                resJSON
              });

              if (resJSON?.results?.channels[0]?.detected_language) {
                let detected_language = resJSON?.results?.channels[0]?.detected_language;
                console.log("current Lang", lang);
                console.log("detected lang", detected_language);
                if (lang != detected_language) {
                  if (mediaRecorder && mediaRecorder.state === "recording") {
                    mediaRecorder.stop();
                  }
                  if (socket.readyState === WebSocket.OPEN) {
                    socket.close();
                  }
                  clearInterval(detectLanguageInterval)
                  startRecording(detectLanguageInterval);
                }
              }
            }
            chunks = [];
          }
        }, 10000);

        // mediaRecorder.onstop = () => {
        //   const audioBlob = new Blob(chunks, { type: "audio/webm" });
        //   const audioUrl = URL.createObjectURL(audioBlob);
        //   audioPlayer.src = audioUrl;
        // };

        const socket = new WebSocket(
          `wss://api.deepgram.com/v1/listen?language=${lang}`,
          ["token", DEEPGRAM_API_KEY]
        );
        socket.onopen = () => {
          console.log({
            event: "onopen",
          });
          mediaRecorder.addEventListener("dataavailable", async (event) => {
            console.log(chunks.length);
            if (event.data.size > 0) {
              chunks.push(event.data);
            }
            if (event.data.size > 0 && socket.readyState == 1) {
              socket.send(event.data);
            }
          });
          mediaRecorder.start(1000);
        };

        socket.onmessage = (message) => {
          const received = JSON.parse(message.data);
          if (
            received &&
            received.channel &&
            received.channel.alternatives &&
            received.channel.alternatives.length > 0
          ) {
            const transcript = received.channel.alternatives[0].transcript;
            if (transcript && received.is_final) {
              // console.log(transcript);
              if (document.getElementById(`${user}-${lang}`)) {
                document.getElementById(`${user}-${lang}`).innerHTML +=
                  transcript + " ";
              } else {
                document.getElementById(
                  `transcripts-${lang}`
                ).innerHTML += `<div><label>${user}</label>: <p id="${user}-${lang}">${transcript}</p></div>`;
              }
            }
          }
        };

        socket.onclose = () => {
          console.log({
            event: "onclose",
          });
        };

        socket.onerror = (error) => {
          console.log({
            event: "onerror",
            error,
          });
        };

        const changeLangButtons = document.querySelectorAll(".changeLang");

        changeLangButtons.forEach((changeLangButton) => {
          changeLangButton.addEventListener("click", (event) => {
            const lang = event.target.dataset.lang;

            // Use the 'lang' value as needed
            console.log(lang);

            if (mediaRecorder && mediaRecorder.state === "recording") {
              mediaRecorder.stop();
            }
            if (socket.readyState === WebSocket.OPEN) {
              socket.close();
            }
            startRecording(lang);
          });
        });

        // selectElement.addEventListener("change", function () {
        //   selectedLan = this.value;
        //   console.log(selectedLan);

        //   if (mediaRecorder && mediaRecorder.state === "recording") {
        //     mediaRecorder.stop();
        //   }
        //   if (socket.readyState === WebSocket.OPEN) {
        //     socket.close();
        //   }

        //   startRecording();

        //   // Perform further actions with the selected value
        // });
      });
  }


  let agoraToken;
  let options = {
    // Pass your App ID here.
    appId: "13696f494c8441f8b3f88fe0afcd940e",
    // Set the channel name.
    channel: "voicedemo",
    // Pass your temp token here.
    token: agoraToken,
    // Set the user ID.
    uid: user,
  };
  async function setAgoraToken() {
    let res = await fetch(`/call-demo/get-agora-token?uid=${user}&channelName=voicedemo`);
    let response = await res.json();
    options.token = response.token
  }
  setAgoraToken();


  let channelParameters = {
    // A variable to hold a local audio track.
    localAudioTrack: null,
    // A variable to hold a remote audio track.
    remoteAudioTrack: null,
    // A variable to hold the remote user id.
    remoteUid: null,
  };
  async function startBasicCall() {
    // Create an instance of the Agora Engine
    const agoraEngine = AgoraRTC.createClient({
      mode: "rtc",
      codec: "vp9",
    });

    // Listen for the "user-published" event to retrieve an AgoraRTCRemoteUser object.
    agoraEngine.on("user-published", async (user, mediaType) => {
      // Subscribe to the remote user when the SDK triggers the "user-published" event.
      await agoraEngine.subscribe(user, mediaType);
      console.log("subscribe success");

      // Subscribe and play the remote audio track.
      if (mediaType == "audio") {
        channelParameters.remoteUid = user.uid;
        // Get the RemoteAudioTrack object from the AgoraRTCRemoteUser object.
        channelParameters.remoteAudioTrack = user.audioTrack;

        console.log("check", user.audioTrack);
        // Play the remote audio track.
        channelParameters.remoteAudioTrack.play();
        showMessage("Remote user connected: " + user.uid);
      }

      // Listen for the "user-unpublished" event.
      agoraEngine.on("user-unpublished", (user) => {
        console.log(user.uid + "has left the channel");
        showMessage("Remote user has left the channel");
      });
    });

    window.onload = function() {
      // Listen to the Join button click event.
      document.getElementById("join").onclick = async function() {
        // Join a channel.
        await agoraEngine.join(
          options.appId,
          options.channel,
          options.token,
          options.uid
        );
        showMessage("Joined channel: " + options.channel);
        // Create a local audio track from the microphone audio.
        channelParameters.localAudioTrack =
          await AgoraRTC.createMicrophoneAudioTrack();
        // Publish the local audio track in the channel.
        await agoraEngine.publish(channelParameters.localAudioTrack);
        console.log("Publish success!");
        startRecording("en");
      };

      // Listen to the Leave button click event.
      document.getElementById("leave").onclick = async function() {
        // Destroy the local audio track.
        channelParameters.localAudioTrack.close();
        // Leave the channel
        await agoraEngine.leave();
        console.log("You left the channel");
        // Refresh the page for reuse
        window.location.reload();
      };
    };
  }

  function showMessage(text) {
    document.getElementById(`message-en`).textContent = text;
  }

  startBasicCall();
</script>

</html>