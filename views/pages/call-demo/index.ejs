<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <title>Get started with Voice Calling</title>

  <script type="text/javascript" src="/dependencies/sails.io.js"></script>
  <script src="https://download.agora.io/sdk/release/AgoraRTC_N-4.18.0.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@speechly/browser-client@2.6.5/core/speechly.umd.min.js" integrity="sha256-T6GnZqWX4692g/IrOZ3bwgKwQ5UzPNss05rjsX2kcvU=" crossorigin="anonymous"></script>
</head>

<body>
  <h2 class="left-align">Get started with Voice Calling</h2>
  <div class="row">
    <select id="mySelect" style="margin:10px 0px">
      <option value="en" selected>English</option>
      <option value="hi">Hindi</option>
      <option value="fr">Franch</option>
    </select>
    <div style="margin:10px 0px">
      <button type="button" id="join">Join</button>
      <button type="button" id="leave">Leave</button>
    </div>
    <div id="transcripts"></div>
    <p id="tentative"></p>
  </div>
  <br>
  <div id="message"></div>
</body>

<script type="module">
  // startRecording();

  let user = '<%= userId %>'
const selectElement = document.getElementById("mySelect");

  var selectedLan = "en";

  selectElement.addEventListener("change", function () {
  selectedLan = this.value;
  console.log(selectedLan);
  // Perform further actions with the selected value
});


  function startRecording(params) {
    navigator.mediaDevices.getUserMedia({
      audio: true
    }).then((stream) => {
      console.log({
        stream
      })
      if (!MediaRecorder.isTypeSupported('audio/webm'))
        return alert('Browser not supported')
      const mediaRecorder = new MediaRecorder(stream, {
        mimeType: 'audio/webm',
      })
      const socket = new WebSocket(`wss://api.deepgram.com/v1/listen?language=${selectedLan}`, [
        'token',
        '94508779e802ad285aee9c7468235ee39bab7989',
      ])
      socket.onopen = () => {
        // document.querySelector('#status').textContent = 'Connected'
        console.log({
          event: 'onopen'
        })
        mediaRecorder.addEventListener('dataavailable', async (event) => {
          console.log("test", event.data);
          if (event.data.size > 0 && socket.readyState == 1) {
            socket.send(event.data)
          }
        })
        mediaRecorder.start(1000)
      }

      socket.onmessage = (message) => {
        const received = JSON.parse(message.data)
        const transcript = received.channel.alternatives[0].transcript
        if (transcript && received.is_final) {
          console.log(transcript)
          // document.querySelector('#transcript').textContent += transcript + ' '

          if (document.getElementById(`${user}`)) {
            document.getElementById(`${user}`).innerHTML += transcript + ' ';
          } else {
            document.getElementById("transcripts").innerHTML += `<div><label>${user}</label>: <p id="${user}">${transcript}</p></div>`
          }
        }
      }

      socket.onclose = () => {
        console.log({
          event: 'onclose'
        })
      }

      socket.onerror = (error) => {
        console.log({
          event: 'onerror',
          error
        })
      }
    })
  }

  let options = {
    // Pass your App ID here.
    appId: '13696f494c8441f8b3f88fe0afcd940e',
    // Set the channel name.
    channel: 'voicedemo',
    // Pass your temp token here.
    token: '007eJxTYJheMD9bRfzeDvtAM+WMr8U77cy2Kn+eWuc2Kaef8YVE0l8FBkNjM0uzNBNLk2QLExPDNIsk4zQLi7RUg8S05BRLE4NUbZEVKQ2BjAylSlXMjAwQCOJzMpTlZyanpqTm5jMwAACBix+9',
    // Set the user ID.
    uid: "<%= userId %>",
  };

  let channelParameters = {
    // A variable to hold a local audio track.
    localAudioTrack: null,
    // A variable to hold a remote audio track.
    remoteAudioTrack: null,
    // A variable to hold the remote user id.
    remoteUid: null,
  };
  async function startBasicCall() {
    // Create an instance of the Agora Engine
    const agoraEngine = AgoraRTC.createClient({
      mode: "rtc",
      codec: "vp9"
    });

    // Listen for the "user-published" event to retrieve an AgoraRTCRemoteUser object.
    agoraEngine.on("user-published", async (user, mediaType) => {
      // Subscribe to the remote user when the SDK triggers the "user-published" event.
      await agoraEngine.subscribe(user, mediaType);
      console.log("subscribe success");

      // Subscribe and play the remote audio track.
      if (mediaType == "audio") {
        channelParameters.remoteUid = user.uid;
        // Get the RemoteAudioTrack object from the AgoraRTCRemoteUser object.
        channelParameters.remoteAudioTrack = user.audioTrack;

        console.log('check', user.audioTrack);
        // Play the remote audio track.
        channelParameters.remoteAudioTrack.play();
        showMessage("Remote user connected: " + user.uid);
      }

      // Listen for the "user-unpublished" event.
      agoraEngine.on("user-unpublished", user => {
        console.log(user.uid + "has left the channel");
        showMessage("Remote user has left the channel");
      });
    });

    window.onload = function() {
      // Listen to the Join button click event.
      document.getElementById("join").onclick = async function() {
        // Join a channel.
        await agoraEngine.join(options.appId, options.channel, options.token, options.uid);
        showMessage("Joined channel: " + options.channel);
        // Create a local audio track from the microphone audio.
        channelParameters.localAudioTrack = await AgoraRTC.createMicrophoneAudioTrack();
        // Publish the local audio track in the channel.
        await agoraEngine.publish(channelParameters.localAudioTrack);
        console.log("Publish success!");
        startRecording();
      }

      // Listen to the Leave button click event.
      document.getElementById('leave').onclick = async function() {
        // Destroy the local audio track.
        channelParameters.localAudioTrack.close();
        // Leave the channel
        await agoraEngine.leave();
        console.log("You left the channel");
        // Refresh the page for reuse
        window.location.reload();
      }
    }
  }

  function showMessage(text) {
    document.getElementById("message").textContent = text;
  }

  startBasicCall();
</script>

</html>
